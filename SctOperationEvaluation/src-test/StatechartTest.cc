/** Generated by YAKINDU Statechart Tools code generator. */
#include <string>
#include "gtest/gtest.h"
#include "SctOperationEvaluationUnit.h"
#include "sc_runner.h"
#include "sc_types.h"

#define SC_UNUSED(P) (void)P

namespace  {

SctOperationEvaluationUnit* statechart;


class EvaluationExampleOperationMock{
	typedef sc_boolean (EvaluationExampleOperationMock::*functiontype)();
	struct parameters
	{
		const sc_string example;
		sc_boolean (EvaluationExampleOperationMock::*behavior)();

		inline parameters(const sc_string text) : example(text)
		{
		}

		inline bool operator==(const parameters& other) {
			return (strcmp(this->example, other.example) == 0);
		}
	};
	public:
	std::list<EvaluationExampleOperationMock::parameters> mocks;
	sc_boolean (EvaluationExampleOperationMock::*evaluationExampleOperationBehaviorDefault)();

	sc_boolean exampleOperation1(){
		return (false);
	}

	sc_boolean exampleOperationDefault(){
		sc_boolean defaultValue = false;
		return (defaultValue);
	}

	void setExampleOperationBehavior(const sc_string example,sc_boolean (EvaluationExampleOperationMock::*func)()){
		parameters p(example);
		p.behavior = func;
	
		std::list<EvaluationExampleOperationMock::parameters>::iterator i = std::find(mocks.begin(), mocks.end(), p);
		if(i != mocks.end()) {
			mocks.erase(i);
		}
		mocks.push_back(p);
	}

	functiontype getBehavior(const sc_string example){
		parameters p(example);

		std::list<EvaluationExampleOperationMock::parameters>::iterator i = std::find(mocks.begin(), mocks.end(), p);
		if(i != mocks.end()) {
			return  i->behavior;
		} else {
			return evaluationExampleOperationBehaviorDefault;
		}
	}
	
	void setDefaultBehavior(sc_boolean (EvaluationExampleOperationMock::*defaultBehavior)()){
		evaluationExampleOperationBehaviorDefault = defaultBehavior;
		mocks.clear();
	}
	
	void initializeBehavior() {
		setDefaultBehavior(&EvaluationExampleOperationMock::exampleOperationDefault);
	}
	
	void reset() {
		initializeBehavior();
		mocks.clear();
	}
};
static EvaluationExampleOperationMock* evaluationExampleOperationMock;

class MockEvaluation : public SctOperationEvaluationUnit::Evaluation::OperationCallback {
	public:
	sc_boolean exampleOperation(sc_string example) {
		return (evaluationExampleOperationMock->*(evaluationExampleOperationMock->getBehavior(example)))();
	}
};

//! The timers are managed by a timer service. */
static SctUnitRunner * runner;

class StatechartTest : public ::testing::Test{
	protected:
	virtual void SetUp() {
		statechart = new SctOperationEvaluationUnit();
		runner = new SctUnitRunner(
			statechart,
			true,
			200
		);
	}
	virtual void TearDown() {
		delete statechart;
		delete runner;
	}
};


TEST_F(StatechartTest, test) {
	evaluationExampleOperationMock = new EvaluationExampleOperationMock();
	evaluationExampleOperationMock->initializeBehavior();
	
	MockEvaluation evaluationMock;
	statechart->evaluation()->setOperationCallback(&evaluationMock);
	statechart->enter();
	
	evaluationExampleOperationMock->setExampleOperationBehavior((sc_string)"",&EvaluationExampleOperationMock::exampleOperation1);
	
	statechart->evaluation
	()->raiseInEvent((sc_string)"");
	
	EXPECT_TRUE(statechart->isStateActive(SctOperationEvaluationUnit::main_region_StateB));
	
	statechart->exit();
	
	
	evaluationExampleOperationMock->reset();
}

}

