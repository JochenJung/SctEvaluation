/** Generated by YAKINDU Statechart Tools code generator. */

#include "SctOperationEvaluationUnit.h"

/*! \file Implementation of the state machine 'SctOperationEvaluation'
*/




SctOperationEvaluationUnit::SctOperationEvaluationUnit()  :
ifaceEvaluation(sc_null),
isExecuting(false)
{
	this->ifaceEvaluation.parent = this;
	for (sc_ushort i = 0; i < maxOrthogonalStates; ++i)
		stateConfVector[i] = SctOperationEvaluation_last_state;
	
	clearInEvents();
}

SctOperationEvaluationUnit::~SctOperationEvaluationUnit()
{
}

SctOperationEvaluationUnit::Evaluation::Evaluation(SctOperationEvaluationUnit* parent) :
inEvent_raised(false),
inEvent_value((sc_string)""),
parent(parent),
ifaceEvaluationOperationCallback(sc_null)
{
}


using namespace sctoperationevaluation_events;

SctEvent* SctOperationEvaluationUnit::getNextEvent()
{
	SctEvent* nextEvent = 0;
	
	if(!inEventQueue.empty()) {
		nextEvent = inEventQueue.front();
		inEventQueue.pop_front();
	}
	
	return nextEvent;
}

void SctOperationEvaluationUnit::dispatch_event(SctEvent * event)
{
	if(event == 0) {
		return;
	}
	switch(event->name)
	{
		case Evaluation_inEvent:
		{
			ifaceEvaluation.dispatch_event(event);
			break;
		}
		default:
			break;
	}
	delete event;
}

void SctOperationEvaluationUnit::Evaluation::dispatch_event(SctEvent * event)
{
	switch(event->name)
	{
		case Evaluation_inEvent:
		{
			SctEvent_Evaluation_inEvent * e = static_cast<SctEvent_Evaluation_inEvent*>(event);
			if(e != 0) {
				internal_raiseInEvent(e->value);
			}
			break;
		}
		default:
			break;
	}
}



sc_boolean SctOperationEvaluationUnit::isActive() const
{
	return stateConfVector[0] != SctOperationEvaluation_last_state;
}

/* 
 * Always returns 'false' since this state machine can never become final.
 */
sc_boolean SctOperationEvaluationUnit::isFinal() const
{
   return false;}

sc_boolean SctOperationEvaluationUnit::check() {
	if (this->ifaceEvaluation.ifaceEvaluationOperationCallback == sc_null) {
		return false;
	}
	return true;
}


sc_boolean SctOperationEvaluationUnit::isStateActive(SctOperationEvaluationStates state) const
{
	switch (state)
	{
		case main_region_StateA : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_STATEA] == main_region_StateA
			);
		case main_region_StateB : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_STATEB] == main_region_StateB
			);
		default: return false;
	}
}

SctOperationEvaluationUnit::Evaluation* SctOperationEvaluationUnit::evaluation()
{
	return &ifaceEvaluation;
}
/* Functions for event inEvent in interface Evaluation */
void SctOperationEvaluationUnit::Evaluation::raiseInEvent(sc_string value)
{
	parent->inEventQueue.push_back(new SctEvent_Evaluation_inEvent(Evaluation_inEvent, value));
	parent->runCycle();
}
void SctOperationEvaluationUnit::Evaluation::internal_raiseInEvent(sc_string value)
{
	inEvent_value = value;
	inEvent_raised = true;
}
void SctOperationEvaluationUnit::Evaluation::setOperationCallback(OperationCallback* operationCallback)
{
	ifaceEvaluationOperationCallback = operationCallback;
}

// implementations of all internal functions

/* 'default' enter sequence for state StateA */
void SctOperationEvaluationUnit::enseq_main_region_StateA_default()
{
	/* 'default' enter sequence for state StateA */
	stateConfVector[0] = main_region_StateA;
}

/* 'default' enter sequence for state StateB */
void SctOperationEvaluationUnit::enseq_main_region_StateB_default()
{
	/* 'default' enter sequence for state StateB */
	stateConfVector[0] = main_region_StateB;
}

/* 'default' enter sequence for region main region */
void SctOperationEvaluationUnit::enseq_main_region_default()
{
	/* 'default' enter sequence for region main region */
	react_main_region__entry_Default();
}

/* Default exit sequence for state StateA */
void SctOperationEvaluationUnit::exseq_main_region_StateA()
{
	/* Default exit sequence for state StateA */
	stateConfVector[0] = SctOperationEvaluation_last_state;
}

/* Default exit sequence for state StateB */
void SctOperationEvaluationUnit::exseq_main_region_StateB()
{
	/* Default exit sequence for state StateB */
	stateConfVector[0] = SctOperationEvaluation_last_state;
}

/* Default exit sequence for region main region */
void SctOperationEvaluationUnit::exseq_main_region()
{
	/* Default exit sequence for region main region */
	/* Handle exit of all possible states (of SctOperationEvaluation.main_region) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case main_region_StateA :
		{
			exseq_main_region_StateA();
			break;
		}
		case main_region_StateB :
		{
			exseq_main_region_StateB();
			break;
		}
		default: break;
	}
}

/* Default react sequence for initial entry  */
void SctOperationEvaluationUnit::react_main_region__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_main_region_StateA_default();
}

sc_integer SctOperationEvaluationUnit::react(const sc_integer transitioned_before) {
	/* State machine reactions. */
	return transitioned_before;
}

sc_integer SctOperationEvaluationUnit::main_region_StateA_react(const sc_integer transitioned_before) {
	/* The reactions of state StateA. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (ifaceEvaluation.inEvent_raised)
		{ 
			exseq_main_region_StateA();
			ifaceEvaluation.ifaceEvaluationOperationCallback->exampleOperation(ifaceEvaluation.inEvent_value);
			enseq_main_region_StateB_default();
			react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken then execute local reactions */
	if ((transitioned_after) == (transitioned_before))
	{ 
		transitioned_after = react(transitioned_before);
	} 
	return transitioned_after;
}

sc_integer SctOperationEvaluationUnit::main_region_StateB_react(const sc_integer transitioned_before) {
	/* The reactions of state StateB. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
	} 
	/* If no transition was taken then execute local reactions */
	if ((transitioned_after) == (transitioned_before))
	{ 
		transitioned_after = react(transitioned_before);
	} 
	return transitioned_after;
}

void SctOperationEvaluationUnit::clearInEvents() {
	ifaceEvaluation.inEvent_raised = false;
}

void SctOperationEvaluationUnit::microStep() {
	switch(stateConfVector[ 0 ])
	{
		case main_region_StateA :
		{
			main_region_StateA_react(-1);
			break;
		}
		case main_region_StateB :
		{
			main_region_StateB_react(-1);
			break;
		}
		default: break;
	}
}

void SctOperationEvaluationUnit::runCycle() {
	/* Performs a 'run to completion' step. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	dispatch_event(getNextEvent());
	do
	{ 
		microStep();
		clearInEvents();
		dispatch_event(getNextEvent());
	} while (ifaceEvaluation.inEvent_raised);
	isExecuting = false;
}

void SctOperationEvaluationUnit::enter() {
	/* Activates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default enter sequence for statechart SctOperationEvaluation */
	enseq_main_region_default();
	isExecuting = false;
}

void SctOperationEvaluationUnit::exit() {
	/* Deactivates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default exit sequence for statechart SctOperationEvaluation */
	exseq_main_region();
	isExecuting = false;
}



